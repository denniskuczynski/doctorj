# Generated by Buildr 1.4.10, change to your liking


# Version number for this release
VERSION_NUMBER = "1.0.0"
# Group identifier for your projects
GROUP = "doctorj"
COPYRIGHT = ""

require 'rbconfig'
target_os = RbConfig::CONFIG['target_os']

# Specify Maven 2.0 remote repositories here, like this:
repositories.remote << "http://repo1.maven.org/maven2"


COMMONS_IO = ['commons-io:commons-io:jar:2.4']

JETTY = ['org.mortbay.jetty:servlet-api:jar:3.0.20100224',
         'org.eclipse.jetty.aggregate:jetty-all:jar:8.1.9.v20130131']

JERSEY = ['asm:asm:jar:3.3.1',
          'com.sun.jersey:jersey-bundle:jar:1.17']

def get_conversion_status(id)
  uri = URI.parse("http://localhost:8080/convert/#{id}")
  http = Net::HTTP.new(uri.host, uri.port)
  request = Net::HTTP::Get.new(uri.request_uri)
  response = http.request(request)
  return response.body
end

def add_conversion(file_path)
  contents = open(file_path, "rb") {|io| io.read }

  uri = URI.parse("http://localhost:8080/convert")
  http = Net::HTTP.new(uri.host, uri.port)
  request = Net::HTTP::Post.new(uri.request_uri)
  request["Content-Type"] = "application/octet-stream"
  request.body = contents
  response = http.request(request)
  return response.body
end

def get_conversion_file(id)
  uri = URI.parse("http://localhost:8080/convert/#{id}/file")
  http = Net::HTTP.new(uri.host, uri.port)
  request = Net::HTTP::Get.new(uri.request_uri)
  response = http.request(request)
  return response.body
end

def delete_conversion(id)
  uri = URI.parse("http://localhost:8080/convert/#{id}")
  http = Net::HTTP.new(uri.host, uri.port)
  request = Net::HTTP::Delete.new(uri.request_uri)
  response = http.request(request)
  return response.body
end

task :test_client do
  require "net/http"
  require "uri"

  file_path = './data/example_docs/test1.odt'
  puts "Sending request to convert: #{file_path}"
  id = add_conversion(file_path)
  puts "Retrieved tracking id: #{id}"
  puts "Waiting 5 seconds..."
  puts "Checking status of request: #{id}"
  status = get_conversion_status(id)
  if status == 'Complete'
    puts "Request: Complete, Retrieving file"
    file = get_conversion_file(id)
    if file
      puts "Retrieved: #{file.size} bytes"
      puts "Cleaning up request data"
      status = delete_conversion(id)
    else
      puts "Unable to retrieve file"
    end
  else
    puts "Request: #{status}"
  end
end

desc "The Doctorj project"
define "doctorj" do
  project.version = VERSION_NUMBER
  project.group = GROUP
  manifest["Implementation-Vendor"] = COPYRIGHT

  if target_os =~ /darwin/
    ure_path = '/Applications/LibreOffice.app/Contents/ure-link/share/java'
    uno_path = '/Applications/LibreOffice.app/Contents/MacOS'
    java_args = ["-Dcom.sun.star.lib.loader.unopath=\"#{uno_path}\""]
  elsif target_os =~ /mswin32/
    ure_path = 'C:/Program Files (x86)/LibreOffice 4.0/URE/java'
    uno_path = 'C:/Program Files (x86)/LibreOffice 4.0/program'
    java_args = ['-d32', "-Dcom.sun.star.lib.loader.unopath=\"#{uno_path}\""]
  end

  compile.with Dir["#{ure_path}/*.jar"]
  compile.with "#{uno_path}/classes/unoil.jar"
  compile.with JETTY
  compile.with JERSEY
  compile.with COMMONS_IO
  
  test.compile.with Dir["#{ure_path}/*.jar"]
  test.compile.with "#{uno_path}/classes/unoil.jar"
  test.compile.with JETTY
  test.compile.with JERSEY
  test.compile.with COMMONS_IO
    
  package(:jar)
  
  run.using :main => "doctorj.Application",
            :java_args => java_args
end
